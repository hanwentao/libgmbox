#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""jp2a converts JPEG images to ASCII drawings."""

import os.path
import subprocess

__all__ = ['jp2a', 'crop_blank']

JP2A_PATH = '/usr/bin/jp2a'

def jp2a(image_data, **kwargs):
    r"""Return the ASCII drawing of the JPEG image in lines.

    >>> jp2a('\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00\x01\x00\x01\x00\x00\xff\xdb\x00C\x00\x08\x06\x06\x07\x06\x05\x08\x07\x07\x07\t\t\x08\n\x0c\x14\r\x0c\x0b\x0b\x0c\x19\x12\x13\x0f\x14\x1d\x1a\x1f\x1e\x1d\x1a\x1c\x1c $.\' ",#\x1c\x1c(7),01444\x1f\'9=82<.342\xff\xdb\x00C\x01\t\t\t\x0c\x0b\x0c\x18\r\r\x182!\x1c!22222222222222222222222222222222222222222222222222\xff\xc0\x00\x11\x08\x00:\x00\xa5\x03\x01"\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1f\x00\x00\x01\x05\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\xff\xc4\x00\xb5\x10\x00\x02\x01\x03\x03\x02\x04\x03\x05\x05\x04\x04\x00\x00\x01}\x01\x02\x03\x00\x04\x11\x05\x12!1A\x06\x13Qa\x07"q\x142\x81\x91\xa1\x08#B\xb1\xc1\x15R\xd1\xf0$3br\x82\t\n\x16\x17\x18\x19\x1a%&\'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xc4\x00\x1f\x01\x00\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\xff\xc4\x00\xb5\x11\x00\x02\x01\x02\x04\x04\x03\x04\x07\x05\x04\x04\x00\x01\x02w\x00\x01\x02\x03\x11\x04\x05!1\x06\x12AQ\x07aq\x13"2\x81\x08\x14B\x91\xa1\xb1\xc1\t#3R\xf0\x15br\xd1\n\x16$4\xe1%\xf1\x17\x18\x19\x1a&\'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\xf7\xd2Nh\xcd)\xebMv\n\x85\x8f@2h\x01wQ\x9a\xe4\xfc=\xe3\xfd+\xc4\x9a\xcc\xfam\xa2N\xb2F\x0b+\xba\x80$\x03\xae?>\xf5\xd5\xd5\xce\x9c\xa9\xca\xd3V\x14Z\x96\xc2\xe6\x8c\xd1\\\xdf\x88\xfcg\xa5x^h"\xd4<\xed\xf3\x02\xc8"\x8fw\x03\xd6\x94b\xe6\xed\x119(\xab\xb3\xa4\xdd\x8e\xb4f\xb8\xff\x00\x1e\xf8\x96\xe7\xc3\xfe\x15K\xeb\x16\tq4\xa8\x91\x97Pp\x08,r:t\x04V\x87\x83oo\xf5/\x0bX\xdfjN\x1e\xeau.J\xa8\x1cd\xe3\xa7\xb6*\xdd\x19*~\xd3\xa5\xec%4\xe5\xcat\x19\xa3p\xf5\xa4\xc8\xc1\xe6\xbc\xff\x00\xc5\xde,\xd5\xbf\xb7\xe2\xf0\xc7\x86\xe3F\xd4\\\x03,\xaf\x8f\xdd\x823\xdf\x8e\x9c\xff\x00\xf5\xe9R\xa5*\xb2\xe5Z\x0erQWg\xa0\xee\x1e\xb4f\xb8}?]\x1e\x13\xb6\xb6\xd3\xbcM\xa9\xbd\xd6\xafv\xe5\xc7\x96\x85\xc6\t\xda\x00\xc0\x1e\x9e\x9e\xb5\xdb\x82\x0e9\xa588\xfa\x04d\xa4;4\x99\xa2\x8a\x82\x85\xcd\x19\xa4\xfci3\xefE\xc0\\\xd2\xe6\x9b\x91@ \x9cP\x03\xb3Fi(\xa0\x05\xcd\x14\x94P\x02\x9e\xb4\xd6\x19R\x0fJq\xebHzP\x07)\xe1\xc8|%\xfd\xb5\xa8I\xa2G\x17\xdb\xe3;.\x88W\xca\x9c\xe3\x03w\x1dA\xe9]4\xb7\x10\xc3\x19\x92YR4\x1dY\x98\x00?\x1a\xf2\xff\x00\x08\xba\xe9\x7f\x13|W\x03\xfc\xaa\xcb$\xe7\x1cp\x1c7\xf2z\xc5\xd2\xf4\xfdG\xe2\x96\xbduw}y$\x1am\xbb|\xa8\xa7!A\xe8\xaa:g\x03\x93\xcfZ\xf4%\x86\xe6\x93r\x97\xba\x92wg4jYY-Oe\xb7\xd4l\xaf2-o \x9c\x8e\x0f\x95 l~F\xbc\x7f\xe2\xe7\xcf\xe3--\x0f\xdd\xfb:\x8fndo\xf0\xae\x8a\xe3\xe1\x0e\x96\x91\xf9\x9an\xa3{mv\xbfrFp@?\x80\x06\xbc\xe3\xc5\xc3\\\xb3\xd7m\xad\xf5\xe7\x12\xcfj\x8a\x91\xce9\xf3c\xdcH9\xef\xfc\xeb\\\r*n\xad\xe9\xca\xfa=\xf4"\xbc\xa5\xc9i#\xbb\xf8\xcf!]\'I\xb7\x03\x08\xf39?\x82\x80?\xf4#]\xde\x88\xd0\xe9\xde\x12\xd3\x9avX\xa2\x86\xce2\xec\xdc\x05\xc2\x0c\xd7\x07\xf1\x9d|\xcd\'H\x98co\x98\xe3$q\xca\x83\xfd+\x1f\xfbZ\xef\xe2\x0e\xadc\xe1\xd8g6\x1ad1\xa9\x901\xc4\x92\xed\x03<w>\x83\xd3\x9a\x15\x07W\r\x0b\xec\xae\xd89\xf2U\x93\xefc\xad?\x10\xafuaz\xbe\x1b\xd0\xa7\xbd\xfb9\x00L\xed\x84n}:\x9a\xe14-g\xc4\x92\xf8\xbfU\xd6,4qw\xa88h\xa5\x8c\x06+\x01$c\xbfm\x98\xafk\xd2\xf4\x9b=\x16\xc2+\x1b\x08R(#\x18\n:\x93\xea}I\xf5\xaf?\xf8A\x99\x7f\xb7\xeeO-%\xc2\x0c\x9eI\xfb\xc7\xfa\xd4R\xa9J4\xe7(\xc7k~#\x9c%\xcd\x1b\xb3\x8d\xbf\xb9\xf1>\xb3\xf1\x02\x03=\x9c\x0f\xadZ\x95\xd9n1\xb1v|\xe3\xbf\xe3\xd6\xbd\xa3\xc3\x93\xeb\r\xa4\x89<A\x1c\x10^\x17o\x96#\xf2\xaa\xf6\xeek\xce\xbc2>\xd1\xf1\xb3V\x95\xf914\xe4\x1f\xa1\xdbS|j\x94\xac\x1a<y\xea\xd2\xb1\x1f@\xbf\xe3Z\xe2\x17\xb6\xa9\n)%t\x994\xfd\xc8\xca\xa3g\xac\x06\x04\x02\x0f\x07\xa5Cqwmj\xa0\xdcO\x1cA\xb8\x05\xdc.~\x99\xebUt8>\xcb\xa0\xd8A\x80<\xabx\xd4\xe0z(\xae\x0b\xe2\x10\xfe\xd2\xf1\xdf\x85\xf4|\x12\x82O5\xd7\xd5K\x8c\xfe\x88k\xce\xa5K\x9e\xa3\x8d\xf6\xb9\xd59\xf2\xc6\xe7W\xe2\xbf\x17\xd8\xf8R\xcd^\xe32\xdc\xcb\xc46\xe9\xd5\xbd\xfd\x87\xbdq\xf1\xea_\x12\xf5\xd4\x17v6\xb6\xfa|\x0e2\x8a\xc12G\xfc\x0c\x12\x7fJ\xa9\xa3D\x9e\'\xf8\xc1\xa8\xcb\xa8\x01"Xy\x82\x18\xcf \x04`\x8b\xc7\xa7;\xbe\xb5\xebjp8\xe2\xb7\x9f&\x1d%e&\xd2\xbd\xfc\xccc\xcdV\xee\xf6G\x94/\xc4\x1f\x11xn\xe5\xec\xfcS\xa7\x86-\x1b\x18\xe5\x8c\x05\xc9\xc7\x03\x8c\x83\xce+W\xe1~\xad\xae\xeb\xe2\xfe\xff\x00U\xbei\xe0F\x11F\x9b\x15F\xee\xa4\xf0\x07A\x81\xf8\xd4_\x18\xa7\xb4_\x0fZD\xfbM\xd1\xb8\x06!\xdc\x00\x0eO\xf2\xad\xdf\x86\xd6\x02\xc3\xc0\xfax\xc6\x1ap\xd3\xb7\xbe\xe3\xc7\xe9\x8f\xca\xb6\xaa\xe9\xbc/:\x85\x9c\x9f\xf5ba\xcd\xedyo\xa1\xd6\xd1E\x15\xe6\x1daE\x14P\x02\x9e\xb4\xd3\xd2\x9cz\xd3[\xee\x9a\x00\xf2\xeb\xa8\x16\xdf\xe3kD\xe3\x11\xeavE[\xdc\x18\xc8\xfeq\xd5\x7f\x86\xf7\xc9\xe1\xad{S\xf0\xd6\xa6\xcb\x0c\xc6]\xd13p\x18\x8e\x0f\xe60E_\xf1\x86 \xf8\xab\xe1{\x859w\xc4d\x0e\xb8\xdcG\xfe\xcck\xa1\xf1_\x81\xf4\xdf\x14\xaa\xc91h.\xd0a.c\x19`=\x08\xee?Z\xf4\xe5R<\x91\x8dM\xa5\x15\xf2\xb6\xc7"\x8brr\x8fF\xce\xa0\x90\x06k\xc5>/\xea\x96W\x9a\xbd\x95\xa5\xbb\xac\x93\xdb+\t\\\x1e\x01$as\xeb\xc15\xb6>\x1dx\xa8(\xb6\x1e/\x9b\xec\x83\xe5\x0b\xbaN\x07\xd3w\xe9\x9a\x92\xf3\xe1\r\xa8\xd0\x85\xad\x85\xc8\xfe\xd02\x87{\xa9\xd7\xaa\x80\xdf(\x03\xa0\xcbg\xbfJXUB\x85E9N\xff\x00\xd7Q\xd5S\xa9\x1e^R\xb7\xc4w\xfbw\xc3M\n\xf0\x9d\xdb\x8c,~\x8d\x11\xcd&\xbb\xe1)/|5\xa4x\x97F\r\x1e\xa9\x05\xa42\xc8#\x18i@@w\x01\xfd\xe1\xfa\xf4\xae\xe2\xd3\xc3\x16\xad\xe1k\x1d\x17V\x86+\xc4\xb6\x8d\x10\x83\x9d\xa4\xa8\xc6kf\xde\xda+[H\xad\xa0\x8c$1(DA\xd0(\xe0\n\xc9b\xf9\x12Q\xe8\xdf\xdc\xca\xf6.N\xef\xa9\xcdx3\xc5\xb1x\x9fE\xf3_j_@\xbbn"\x1c`\xff\x00x\x0fC\xfc\xeb\x9e\xf80\x07\xf6\x16\xa4\xc7\xa9\xba\xc6\x7f\xe0#\xfck\xb4\xb2\xf0\xbe\x8f\xa6\xeaR_\xd9\xd8\xa4\x172\x02\x1d\xd1\x88\r\x9eNFq\x8f\xc2\xb4m\xec\xad\xac\xd0\xad\xb4\x11@\xa4\xe4\xacH\x14\x13\xf8\n\xceU\xa0\xa38\xd3ZJ\xdf\x81j\x9c\xae\x9b{\x1e)\xfd\xa9q\xe0\xbf\x89\x9a\xa6\xa1y\xa7\xcf,s\xbc\xdbB\x8ce]\xf7\x02\x0fN\xd5/\xc5\rLk\x1aw\x87u\x15\x89\xe1I\xa2\x91\xca9\xfb\xb9+\xc1\xfc\x8d{f\xdc\xfaV\x0f\x8a\xbc-i\xe2\xad0Z\\\x13\x13\xa3n\x8aU\x191\x9e\x9d;\x8fj\xde\x9e.\x0e\xace(\xed\xd4\xceT\x1f+I\x9a\xd6SG-\x85\xbc\x918h\xda5e#\xa1\x18\x15\xe6\xd0\xdc\xc5\xae|o\xf3`a$Z}\xbb!e\xe4d\x02\x0f\xfe<\xff\x00\xa5%\x9f\xc3\xaf\x15[F,W\xc5\r\x16\x9d\x9f\xbb\x1b>q\xe9\xb4\xf0?:\xd5\xf0\xdf\x80n<1\xaa\xeaW\xd6\xb7\x10\xb9\x92\x03\x15\xa2\xb9$\x8eA\xcb\x9e\x99$\x0e\x9e\xf4\xa2\xa9S\xe6jwmh\'\xcf+\'\x1d\x8c_\x12\xf8w]\xf0\xef\x8c\x1f\xc4\xbe\x1e\xb77\x11\xceKK\x12\r\xc4g\xef\x02:\x90O<zU\xd4\xf1\xf7\x8a\xaf\x10Ci\xe0\xfb\x85\xb8?\xc5(p\x80\xfe*?\x9dd\xda\xf8\xfb\xc4\xbe\x19\xd5\xeea\xf1=\x8c\xd3\xc6\xed\x9f\x956\x84\xff\x00p\xf4"\xb6\x1b\xe2\x93\xdf\xaf\x97\xa1\xf8z\xfa\xeaV\xe0\x16\xe1A\xf7\xdb\x9a\xdeP\xaa\xd4T\xa0\xa5e\xbd\xfay\x898\xa9oo#\x83\xf1\xb6\x9b\xadG\xa8\xd8\xbe\xb5v\xb7\x1a\xa5\xe0?\xb8\x8f\xee\xc22\x02\x81\xf5$\xf08\xe2\xbd\xebL\xb4\x16\x1a]\xa5\x98\xff\x00\x96\x10\xa4_\xf7\xca\x81\\\'\x86|\x19\xaa^k\xff\x00\xf0\x92\xf8\xa5\xd4\xde\x03\xba\x1ba\x82\x10\x8e\x84\xe3\xd3\xd3\xf1\xafF\x15\x862\xbf4cM;\xf2\xf6+\x0f\x06\xaf&-\x14Q\\\x07HQE\x14\x00\x1aC\xd2\x9fE\x00r0\xf8"/\xf8M\xa5\xf1%\xd5\xdb\xce\xe0\xe6\xde\x020\xb1|\xa0g=\xfb\x9f\xc6\xba\xb1\xcfQN\xa5\xab\x9c\xe5;_\xa1*)l0\xfd(\xc5>\x92\xb3\xb2*\xc8m\x03\x8a}\x14\xc0m%>\x8a\x00m\x14\xea(\x01\x87\xe9Gj}\x14\xac\x04M\x1a\xb0\x1b\x947\xd4P\x13\x1d\x00\x15-\x14\xc0f;\xd1O\xa2\x80\x1bE-\x14\x00\x94S\xa8\xa0\x0f\xff\xd9', chars=' @@@', invert=True, width=80)

    """

    if not os.path.exists(JP2A_PATH):
        raise IOError('"%s" not found' % JP2A_PATH)

    args = [JP2A_PATH]
    for key, value in kwargs.items():
        if value is None or value == False:
            continue
        elif value == True:
            args.append('--%s' % key)
        else:
            args.append('--%s=%s' % (key, value))
    args.append('-')

    process = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    stdout, stderr = process.communicate(input=image_data)

    lines = stdout.split('\n')
    if lines and not lines[-1]:
        lines.pop()
    return lines

def crop_blank(image, blank, threshold=0.1):
    x0, y0, x1, y1 = None, None, None, None
    width, height = image.size
    for x in range(width):
        for y in range(height):
            pixel = image.getpixel((x, y))
            diff = (pixel[0] - blank[0], pixel[1] - blank[1], pixel[2] - blank[2])
            if (abs(diff[0]) + abs(diff[1]) + abs(diff[2])) / (255 * 3.0) > threshold:
                x0 = x if x0 is None else min(x0, x)
                y0 = y if y0 is None else min(y0, y)
                x1 = x if x1 is None else max(x1, x)
                y1 = y if y1 is None else max(y1, y)
    cropped_image = image.crop((x0, y0, x1, y1))
    return cropped_image

if __name__ == '__main__':
    import doctest
    doctest.testmod()
